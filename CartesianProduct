package test;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * @author camel
 * @date 2018/3/2
 */
public class Test
{
    public Test()
    {
    }

    public static <E> Set<E> of(E... es) throws Exception
    {
        Set<E> set = new HashSet<>();
        Collections.addAll(set, es);

        return set;
    }

    public static void main(String[] args) throws Exception
    {
        Set<Integer> iList1 = of(1, 2, 3);
        Set<Integer> iList2 = of(4, 5);
        Set<Integer> iList3 = of(3, 6);
        Set<List<Integer>> set = calculateCartesianProduct(iList1, iList2, iList3);

        System.out.println(set);
    }

    public static <E> Set<List<E>> calculateCartesianProduct0(Set<List<E>> set1, Set<E> set2)
    {
        return calculateCartesianProduct1(set1,
                set2.stream().map(Collections::singletonList).collect(Collectors.toSet()));
    }

    public static <E> Set<List<E>> calculateCartesianProduct1(Set<List<E>> set1, Set<List<E>> set2)
    {
    	System.out.println(set1);
    	System.out.println(set2);
        return set1.stream().flatMap(list1 -> set2.stream().map(list2 ->
        {
            List<E> list = new ArrayList<>(list1);
            list.addAll(list2);
            return list; 
        })).collect(Collectors.toSet());
    }

    public static <E> Set<List<E>> calculateCartesianProduct(Set<E>... sets)
    {
        return calculateCartesianProduct(Arrays.asList(sets));
    }

    public static <E> Set<List<E>> calculateCartesianProduct(List<Set<E>> sets)
    {
        if (sets == null)
            return null;

        if (sets.size() == 0)
            return Collections.emptySet();

        Set<List<E>> r = Collections.singleton(Collections.emptyList());

        return sets.stream().reduce(r, Test::calculateCartesianProduct0, Test::calculateCartesianProduct1);
    }
}
